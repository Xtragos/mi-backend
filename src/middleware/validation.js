/**
 * Middleware de validaci칩n centralizado
 * Proporciona validaciones reutilizables para diferentes entidades
 */

const { body, query, param, validationResult } = require('express-validator');
const { logger } = require('../utils/logger');

/**
 * Middleware para manejar errores de validaci칩n
 */
const handleValidationErrors = (req, res, next) => {
  const errors = validationResult(req);
  
  if (!errors.isEmpty()) {
    logger.warn('游뛂 Errores de validaci칩n:', {
      url: req.originalUrl,
      method: req.method,
      errors: errors.array(),
      userId: req.usuario?.id || null
    });

    return res.status(400).json({
      error: 'Datos inv치lidos',
      message: 'Los datos enviados no cumplen con los requisitos',
      details: errors.array().map(error => ({
        field: error.path || error.param,
        message: error.msg,
        value: error.value
      }))
    });
  }
  
  next();
};

/**
 * Validaciones para autenticaci칩n
 */
const authValidation = {
  login: [
    body('email')
      .isEmail()
      .normalizeEmail()
      .withMessage('Email v치lido requerido'),
    body('password')
      .isLength({ min: 6 })
      .withMessage('Contrase침a debe tener al menos 6 caracteres'),
    handleValidationErrors
  ],

  refresh: [
    body('refreshToken')
      .notEmpty()
      .withMessage('Refresh token requerido'),
    handleValidationErrors
  ]
};

/**
 * Validaciones para tickets
 */
const ticketValidation = {
  create: [
    body('asunto')
      .isLength({ min: 5, max: 200 })
      .withMessage('Asunto debe tener entre 5 y 200 caracteres')
      .trim(),
    body('descripcion')
      .isLength({ min: 10, max: 2000 })
      .withMessage('Descripci칩n debe tener entre 10 y 2000 caracteres')
      .trim(),
    body('departamentoId')
      .isUUID()
      .withMessage('ID de departamento v치lido requerido'),
    body('categoriaId')
      .isUUID()
      .withMessage('ID de categor칤a v치lido requerido'),
    body('prioridad')
      .optional()
      .isIn(['BAJA', 'MEDIA', 'ALTA', 'URGENTE'])
      .withMessage('Prioridad debe ser: BAJA, MEDIA, ALTA o URGENTE'),
    body('proyectoId')
      .optional()
      .isUUID()
      .withMessage('ID de proyecto debe ser v치lido'),
    body('ubicacion')
      .optional()
      .isLength({ max: 500 })
      .withMessage('Ubicaci칩n no puede exceder 500 caracteres')
      .trim(),
    body('coordenadas')
      .optional()
      .matches(/^-?\d+\.?\d*,-?\d+\.?\d*$/)
      .withMessage('Coordenadas deben tener formato lat,lng (ej: -8.9824,-79.5199)'),
    body('fechaVencimiento')
      .optional()
      .isISO8601()
      .withMessage('Fecha de vencimiento debe ser v치lida')
      .custom((value) => {
        if (new Date(value) <= new Date()) {
          throw new Error('Fecha de vencimiento debe ser futura');
        }
        return true;
      }),
    body('horasEstimadas')
      .optional()
      .isFloat({ min: 0.1, max: 999 })
      .withMessage('Horas estimadas debe ser un n칰mero entre 0.1 y 999'),
    handleValidationErrors
  ],

  update: [
    param('id')
      .isUUID()
      .withMessage('ID de ticket inv치lido'),
    body('asunto')
      .optional()
      .isLength({ min: 5, max: 200 })
      .withMessage('Asunto debe tener entre 5 y 200 caracteres')
      .trim(),
    body('descripcion')
      .optional()
      .isLength({ min: 10, max: 2000 })
      .withMessage('Descripci칩n debe tener entre 10 y 2000 caracteres')
      .trim(),
    handleValidationErrors
  ],

  assign: [
    param('id')
      .isUUID()
      .withMessage('ID de ticket inv치lido'),
    body('agenteId')
      .isUUID()
      .withMessage('ID de agente v치lido requerido'),
    handleValidationErrors
  ],

  updateStatus: [
    param('id')
      .isUUID()
      .withMessage('ID de ticket inv치lido'),
    body('estado')
      .isIn(['ABIERTO', 'EN_PROGRESO', 'EN_ESPERA', 'RESUELTO', 'CERRADO', 'CANCELADO'])
      .withMessage('Estado inv치lido'),
    body('comentario')
      .optional()
      .isLength({ max: 500 })
      .withMessage('Comentario no puede exceder 500 caracteres')
      .trim(),
    handleValidationErrors
  ],

  addWorkLog: [
    param('id')
      .isUUID()
      .withMessage('ID de ticket inv치lido'),
    body('descripcion')
      .isLength({ min: 10, max: 1000 })
      .withMessage('Descripci칩n debe tener entre 10 y 1000 caracteres')
      .trim(),
    body('horas')
      .isFloat({ min: 0.1, max: 24 })
      .withMessage('Horas debe ser un n칰mero entre 0.1 y 24'),
    body('fechaTrabajo')
      .optional()
      .isISO8601()
      .withMessage('Fecha de trabajo debe ser v치lida')
      .custom((value) => {
        const workDate = new Date(value);
        const now = new Date();
        const maxPastDays = 30;
        const minDate = new Date(now.getTime() - (maxPastDays * 24 * 60 * 60 * 1000));
        
        if (workDate > now) {
          throw new Error('Fecha de trabajo no puede ser futura');
        }
        if (workDate < minDate) {
          throw new Error(`Fecha de trabajo no puede ser mayor a ${maxPastDays} d칤as en el pasado`);
        }
        return true;
      }),
    handleValidationErrors
  ],

  addSignature: [
    param('id')
      .isUUID()
      .withMessage('ID de ticket inv치lido'),
    body('datosBase64')
      .matches(/^data:image\/[a-zA-Z]+;base64,/)
      .withMessage('Datos de firma en formato base64 requeridos')
      .isLength({ min: 100, max: 500000 })
      .withMessage('Firma debe tener un tama침o v치lido'),
    body('firmanteId')
      .optional()
      .isUUID()
      .withMessage('ID de firmante debe ser v치lido'),
    handleValidationErrors
  ]
};

/**
 * Validaciones para usuarios
 */
const userValidation = {
  create: [
    body('email')
      .isEmail()
      .normalizeEmail()
      .withMessage('Email v치lido requerido'),
    body('password')
      .isLength({ min: 8 })
      .withMessage('Contrase침a debe tener al menos 8 caracteres')
      .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]/)
      .withMessage('Contrase침a debe contener al menos: 1 min칰scula, 1 may칰scula, 1 n칰mero y 1 s칤mbolo'),
    body('nombreCompleto')
      .isLength({ min: 3, max: 100 })
      .withMessage('Nombre completo debe tener entre 3 y 100 caracteres')
      .trim(),
    body('telefono')
      .optional()
      .matches(/^[\+]?[1-9][\d]{0,15}$/)
      .withMessage('Tel칠fono debe tener formato v치lido'),
    body('rol')
      .isIn(['ADMIN', 'JEFE_DEPARTAMENTO', 'AGENTE', 'CLIENTE'])
      .withMessage('Rol inv치lido'),
    body('departamentoId')
      .if(body('rol').isIn(['JEFE_DEPARTAMENTO', 'AGENTE']))
      .isUUID()
      .withMessage('Departamento requerido para jefes y agentes'),
    handleValidationErrors
  ],

  update: [
    param('id')
      .isUUID()
      .withMessage('ID de usuario inv치lido'),
    body('email')
      .optional()
      .isEmail()
      .normalizeEmail()
      .withMessage('Email v치lido requerido'),
    body('nombreCompleto')
      .optional()
      .isLength({ min: 3, max: 100 })
      .withMessage('Nombre completo debe tener entre 3 y 100 caracteres')
      .trim(),
    body('telefono')
      .optional()
      .matches(/^[\+]?[1-9][\d]{0,15}$/)
      .withMessage('Tel칠fono debe tener formato v치lido'),
    handleValidationErrors
  ]
};


/**
 * Validaciones para comentarios
 */
const commentValidation = {
  create: [
    param('id')
      .isUUID()
      .withMessage('ID de ticket inv치lido'),
    body('contenido')
      .isLength({ min: 1, max: 2000 })
      .withMessage('Contenido debe tener entre 1 y 2000 caracteres')
      .trim(),
    body('esInterno')
      .optional()
      .isBoolean()
      .withMessage('esInterno debe ser booleano'),
    handleValidationErrors
  ],

  update: [
    param('id')
      .isUUID()
      .withMessage('ID de comentario inv치lido'),
    body('contenido')
      .isLength({ min: 1, max: 2000 })
      .withMessage('Contenido debe tener entre 1 y 2000 caracteres')
      .trim(),
    handleValidationErrors
  ]
};

/**
 * Validaciones para departamentos
 */
const departmentValidation = {
  create: [
    body('nombre')
      .isLength({ min: 3, max: 100 })
      .withMessage('Nombre debe tener entre 3 y 100 caracteres')
      .trim(),
    body('descripcion')
      .optional()
      .isLength({ max: 500 })
      .withMessage('Descripci칩n no puede exceder 500 caracteres')
      .trim(),
    body('color')
      .optional()
      .matches(/^#[0-9A-F]{6}$/i)
      .withMessage('Color debe ser un c칩digo hexadecimal v치lido'),
    handleValidationErrors
  ]
};

/**
 * Validaciones para categor칤as
 */
const categoryValidation = {
  create: [
    body('nombre')
      .isLength({ min: 3, max: 100 })
      .withMessage('Nombre debe tener entre 3 y 100 caracteres')
      .trim(),
    body('descripcion')
      .optional()
      .isLength({ max: 500 })
      .withMessage('Descripci칩n no puede exceder 500 caracteres')
      .trim(),
    body('departamentoId')
      .isUUID()
      .withMessage('ID de departamento v치lido requerido'),
    body('color')
      .optional()
      .matches(/^#[0-9A-F]{6}$/i)
      .withMessage('Color debe ser un c칩digo hexadecimal v치lido'),
    body('icono')
      .optional()
      .isLength({ max: 50 })
      .withMessage('Icono no puede exceder 50 caracteres'),
    handleValidationErrors
  ]
};

/**
 * Validaciones para queries de paginaci칩n
 */
const paginationValidation = [
  query('page')
    .optional()
    .isInt({ min: 1 })
    .withMessage('P치gina debe ser un n칰mero entero mayor a 0'),
  query('limit')
    .optional()
    .isInt({ min: 1, max: 100 })
    .withMessage('L칤mite debe ser un n칰mero entre 1 y 100'),
  handleValidationErrors
];

/**
 * Validaciones para filtros de tickets
 */
const ticketFiltersValidation = [
  query('estado')
    .optional()
    .isIn(['ABIERTO', 'EN_PROGRESO', 'EN_ESPERA', 'RESUELTO', 'CERRADO', 'CANCELADO'])
    .withMessage('Estado de filtro inv치lido'),
  query('prioridad')
    .optional()
    .isIn(['BAJA', 'MEDIA', 'ALTA', 'URGENTE'])
    .withMessage('Prioridad de filtro inv치lida'),
  query('departamentoId')
    .optional()
    .isUUID()
    .withMessage('ID de departamento debe ser v치lido'),
  query('categoriaId')
    .optional()
    .isUUID()
    .withMessage('ID de categor칤a debe ser v치lido'),
  query('agenteId')
    .optional()
    .isUUID()
    .withMessage('ID de agente debe ser v치lido'),
  query('buscar')
    .optional()
    .isLength({ min: 1, max: 100 })
    .withMessage('B칰squeda debe tener entre 1 y 100 caracteres')
    .trim(),
  ...paginationValidation
];

/**
 * Validaci칩n para IDs de par치metros UUID
 */
const validateUuidParam = (paramName = 'id') => [
  param(paramName)
    .isUUID()
    .withMessage(`${paramName} debe ser un UUID v치lido`),
  handleValidationErrors
];


/**
 * Sanitizar inputs para prevenir XSS
 */
const sanitizeInput = (req, res, next) => {
  const sanitize = (obj) => {
    for (const key in obj) {
      if (typeof obj[key] === 'string') {
        // Escapar caracteres peligrosos b치sicos
        obj[key] = obj[key]
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;')
          .replace(/'/g, '&#x27;')
          .replace(/\//g, '&#x2F;');
      } else if (typeof obj[key] === 'object' && obj[key] !== null) {
        sanitize(obj[key]);
      }
    }
  };

  if (req.body) sanitize(req.body);
  if (req.query) sanitize(req.query);
  if (req.params) sanitize(req.params);

  next();
};

module.exports = {
  handleValidationErrors,
  authValidation,
  ticketValidation,
  userValidation,
  commentValidation,
  departmentValidation,
  categoryValidation,
  paginationValidation,
  ticketFiltersValidation,
  validateUuidParam,
  sanitizeInput
};