/**
 * Configuración principal de Express
 * Incluye middleware de seguridad y rutas
 */

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const { errorHandler, notFoundHandler } = require('./middleware/errorHandler');
const { requestLogger, updateUserInLogs, validationLogger, accessLogger, rateLimitLogger } = require('./middleware/logger');
const rateLimiter = require('./middleware/rateLimiter');
const { sanitizeInput } = require('./middleware/validation');

const app = express();

// ========================================
// MIDDLEWARE DE LOGGING Y SEGURIDAD
// ========================================

/**
 * Request Logger - debe ir antes de otros middleware
 */
app.use(requestLogger);

/**
 * Rate Limiting Logger
 */
app.use(rateLimitLogger);

/**
 * Validation Logger
 */
app.use(validationLogger);

/**
 * Access Logger
 */
app.use(accessLogger);

/**
 * Helmet - Protección de headers HTTP
 * Configura headers de seguridad automáticamente
 */
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      scriptSrc: ["'self'"],
      imgSrc: ["'self'", "data:", "blob:"],
      connectSrc: ["'self'"],
    },
  },
  crossOriginEmbedderPolicy: false
}));

/**
 * Sanitización de inputs
 */
app.use(sanitizeInput);

/**
 * CORS - Control de acceso entre dominios
 * Permite solo IPs específicas de acceso
 */
const corsOptions = {
  origin: function (origin, callback) {
    const allowedOrigins = process.env.ALLOWED_ORIGINS?.split(',') || [];
    
    // Permitir requests sin origin (mobile apps, Postman)
    if (!origin) return callback(null, true);
    
    if (allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      callback(new Error('❌ Acceso denegado por política CORS'));
    }
  },
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],
  allowedHeaders: ['Content-Type', 'Authorization']
};

app.use(cors(corsOptions));

/**
 * Rate Limiting - Prevención de ataques de fuerza bruta
 * Limita número de requests por IP
 */
app.use('/api/', rateLimiter.general);

/**
 * Compresión GZIP
 * Reduce el tamaño de las respuestas
 */
app.use(compression());

/**
 * Parser de JSON con límite de tamaño
 * Previene ataques de payload masivo
 */
app.use(express.json({ 
  limit: '10mb',
  verify: (req, res, buf) => {
    req.rawBody = buf;
  }
}));

app.use(express.urlencoded({ extended: true, limit: '10mb' }));

/**
 * Logging de requests
 * Registra todas las peticiones para auditoría
 */
app.use(requestLogger);

// ========================================
// RUTAS DE LA API
// ========================================

// Ruta de salud del sistema
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    version: '1.0.0'
  });
});
// Middleware para actualizar userId en logs después de auth
app.use('/api', updateUserInLogs);

// Rutas de autenticación (con rate limiting específico)
app.use('/api/auth', rateLimiter.auth, require('./routes/auth'));

// Rutas protegidas de la API
app.use('/api/usuarios', require('./routes/usuarios'));
app.use('/api/tickets', require('./routes/tickets'));
app.use('/api/departamentos', require('./routes/departamentos'));
app.use('/api/categorias', require('./routes/categorias'));
app.use('/api/adjuntos', require('./routes/adjuntos'));
app.use('/api/comentarios', require('./routes/comentarios'));
app.use('/api/notificaciones', require('./routes/notificaciones'));
app.use('/api/dashboard', require('./routes/dashboard'));

// Servir archivos estáticos (uploads) con protección
app.use('/uploads', express.static(process.env.UPLOAD_PATH, {
  maxAge: '1d',
  etag: true
}));

// ========================================
// MANEJO DE ERRORES
// ========================================

// Ruta no encontrada
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Ruta no encontrada',
    message: `La ruta ${req.originalUrl} no existe`,
    timestamp: new Date().toISOString()
  });
});

// Ruta no encontrada
app.use('*', notFoundHandler);

// Middleware global de manejo de errores (debe ser el último)
app.use(errorHandler);

module.exports = app;